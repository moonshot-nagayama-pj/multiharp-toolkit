import io

class Mode:
    T2: "Mode"
    T3: "Mode"

class RefSource:
    InternalClock: "RefSource"
    ExternalClock10MHz: "RefSource"
    WhiteRabbitMaster: "RefSource"
    WhiteRabbitSlave: "RefSource"
    WhiteRabbitGrandMaster: "RefSource"
    ExternalGpsPps: "RefSource"
    ExternalGpsPPsUart: "RefSource"
    WhiteRabbitMasterMultiHarp: "RefSource"
    WhiteRabbitSlaveMultiHarp: "RefSource"
    WhiteRabbitGrandMasterMultiHarp: "RefSource"

class Edge:
    Falling: "Edge"
    Rising: "Edge"

class MeasurementControl:
    SingleShotCtc: "MeasurementControl"
    C1Gated: "MeasurementControl"
    C1StartCtcStop: "MeasurementControl"
    C1StartC2Stop: "MeasurementControl"
    WhiteRabbitM2S: "MeasurementControl"
    WhiteRabbitS2M: "MeasurementControl"
    SwitchStartSwitchStop: "MeasurementControl"

# class Parser:
#     def __init__(self, version:int):...
#     def parse_records(self, inputfile: io.BufferedReader, num_records: int):...
#     def parse_record(self, data: int):...

def get_library_version() -> str: ...
def open_device(device_index: int) -> str: ...
def close_device(device_index: int) -> None: ...
def initialize(device_index: int, mode: Mode, ref_source: RefSource) -> None: ...
def get_hardware_info(device_index: int) -> tuple[str, str, str]: ...
def get_feature(device_index: int) -> int: ...
def get_serial_number(device_index: int) -> str: ...
def get_base_resolution(device_index: int) -> tuple[float, int]: ...
def get_number_of_input_channels(device_index: int) -> int: ...
def get_number_of_modules(device_index: int) -> int: ...
def get_module_info(device_index: int, module_index: int) -> tuple[int, int]: ...
def get_debug_info(device_index: int) -> str: ...
def set_sync_divider(device_index: int, divider: int) -> None: ...
def set_sync_edge_trigger(
    device_index: int, trigger_level: int, mac_edge: Edge
) -> None: ...
def set_sync_channel_offset(device_index: int, offset: int) -> None: ...
def set_sync_channel_enable(device_index: int, enable: bool) -> None: ...
def set_sync_deadtime(device_index: int, on: bool, deadtime_ps: int) -> None: ...
def set_input_edge_trigger(
    device_index: int, channel: int, trigger_level: int, mac_edge: Edge
) -> None: ...
def set_input_channel_offset(device_index: int, channel: int, offset: int) -> None: ...
def set_input_channel_enable(device_index: int, channel: int, enable: bool) -> None: ...
def set_input_deadtime(
    device_index: int, channel: int, on: bool, deadtime_ps: int
) -> None: ...
def set_input_hysteresis(device_index: int, hist_code: int) -> None: ...
def set_stop_overflow(
    device_index: int, stop_overflow: bool, stop_count: int
) -> None: ...
def set_binning(device_index: int, binning: int) -> None: ...
def set_offset(device_index: int, offset: int) -> None: ...
def set_histogram_length(device_index: int, len_code: int) -> int: ...
def clear_histogram_memory(device_index: int) -> None: ...
def set_measurement_control(
    device_index: int,
    meas_control: MeasurementControl,
    start_edge: Edge,
    stop_edge: Edge,
) -> None: ...
def set_trigger_output(device_index: int, period_100ns: int) -> None: ...
def start_measurement(device_index: int, acquisition_time: int) -> None: ...
def stop_measurement(device_index: int) -> None: ...
def ctc_status(device_index: int) -> int: ...
def get_histogram(device_index: int, channel: int) -> list[int]: ...
def get_all_histogram(device_index: int) -> list[int]: ...
def get_resolution(device_index: int) -> float: ...
def get_sync_rate(device_index: int) -> int: ...
def get_count_rate(device_index: int, channel: int) -> int: ...
def get_all_count_rates(device_index: int) -> tuple[int, list[int]]: ...
def get_flags(device_index) -> int: ...
def get_elapsed_measurement_time(device_index: int) -> float: ...
def get_start_time(device_index: int) -> tuple[int, int, int]: ...
def get_warnings(device_index: int) -> str: ...
def read_fifo(device_index: int) -> tuple[int, list[int]]: ...
def is_measurement_running(device_index: int) -> bool: ...
